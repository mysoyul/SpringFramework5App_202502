<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- Transaction Manager 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction Advice 설정 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			
			<!--No existing transaction found for transaction marked with propagation 'mandatory'-->
<!-- 			<tx:method name="deleteUser" propagation="NOT_SUPPORTED"/> -->
<!-- 			<tx:method name="delete" propagation="MANDATORY"/> -->
			
			<!-- 예외=Existing transaction found for transaction marked with propagation 'never' -->
			<!-- updateUser(): Service, update(): Dao  -->
			<tx:method name="updateUser" propagation="NOT_SUPPORTED"/>
<!-- 			<tx:method name="update" propagation="REQUIRED" /> -->
		<tx:method name="update" propagation="MANDATORY" />
		</tx:attributes>
	</tx:advice>
	
	<!-- Advisor 설정 : Transaction Advice를 어떤 Target에 적용할지를 설정함  -->
	<aop:config>
		<aop:pointcut expression="execution(public * myspring.**..*(..))" id="txPointCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	
	
	<!-- @Aspect가 선언된 모든 Spring Bean을 Aspect로 자동 등록해줌 -->
	<aop:aspectj-autoproxy />

	<!-- AOP 설정 -->
	<aop:config>
		<!-- Aspect = Advice + PointCut -->
		<aop:aspect id="traceAspect" ref="performanceTraceAdvice">
<!-- 			<aop:around pointcut="execution(public * myspring.user..*(..))" -->
<!-- 				method="trace" /> -->				
			<aop:around 
				pointcut="execution(public * myspring.user..*(..))||execution(public * myspring.student..*(..))"
 				method="trace" />		
		</aop:aspect>
	</aop:config>

	<!-- Advice 클래스를 Bean으로 등록 -->
	<bean id="performanceTraceAdvice" class="myspring.aop.xml.PerformanceTraceAdvice" />	
	
<!-- 	<context:component-scan  -->
<!-- 		base-package="myspring.**.dao,myspring.**.service"> -->
	<context:component-scan 
		base-package="myspring.user,myspring.student">		
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
	</context:component-scan>	
	<context:component-scan base-package="myspring.aop.annot" />	

	<context:property-placeholder
		location="classpath:values.properties" />

	<!-- HikariDataSource 클래스 Spring Bean으로 설정 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		p:jdbcUrl="${db.url}" p:driverClassName="${db.driverClass}"
		p:username="${db.username}" p:password="${db.password}" />

	<!-- SqlSessionFactoryBean 클래스 Spring Bean으로 설정 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis/SqlMapConfig.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- SqlSessionTemplate 클래스 Spring Bean으로 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- MapperScannerConfigurer 클래스 Spring Bean으로 설정  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="myspring.**.dao.mapper"/>
		<property name="sqlSessionTemplateBeanName" value="sqlSession" /> 
	</bean>
	

</beans>
